{"version":3,"sources":["components/Header.js","components/ConfigInputs.js","assets/img/casper.png","components/QrCode.js","App.js","reportWebVitals.js","index.js"],"names":["Header","ConfigInputs","onInputChange","platforms","useState","radioValue","setRadioValue","alert","useAlert","useSignerToFetchPublicKey","a","Signer","isConnected","sendConnectionRequest","getActivePublicKey","publicKey","document","getElementById","value","show","message","className","style","ButtonGroup","id","Object","keys","map","radio","ToggleButton","type","variant","name","checked","onChange","e","currentTarget","InputGroup","Button","size","onClick","FormControl","placeholder","aria-label","aria-describedby","autocomplete","QrCode","qrData","Stack","direction","gap","platform","bgColor","fgColor","level","includeMargin","renderAs","imageSettings","src","logo","x","y","height","width","excavate","link","createElement","canvas","href","toDataURL","download","click","downloadQR","toBlob","blob","formData","FormData","append","axios","method","url","env","IMGBB_BASE","IMGBB_EXPIRATION","IMGBB_API_KEY","data","then","response","navigator","clipboard","writeText","display_url","catch","err","App","address","amount","transferId","setQrData","Container","fluid","Row","Col","xs","sm","md","lg","querySelector","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","options","timeout","position","positions","TOP_RIGHT","ReactDOM","render","StrictMode","template","AlertTemplate"],"mappings":"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","file":"static/js/main.80081a0f.chunk.js","sourcesContent":["const Header = () => {\n    return (\n        <header><h1>Casper QR Generator</h1></header>\n    );\n};\n\nexport default Header;","import {InputGroup, Button, FormControl, ButtonGroup, ToggleButton} from 'react-bootstrap';\nimport {useState} from 'react';\nimport { useAlert } from 'react-alert'\nimport {Signer} from 'casper-js-sdk';\n\nconst ConfigInputs = ( {onInputChange, platforms} ) => {\n    const [radioValue, setRadioValue] = useState('cspr.live');\n    const alert = useAlert();\n      \n    const useSignerToFetchPublicKey = async () => {\n        try {\n            let isConnected = await Signer.isConnected();\n            if (!isConnected) {\n                Signer.sendConnectionRequest();\n                \n                return;\n            }\n        \n            let publicKey = await Signer.getActivePublicKey();\n            document.getElementById('address').value = publicKey;\n        } catch (e) {\n            alert.show(e.message);\n        }\n    };\n\n    return (\n        <div className=\"config-inputs\" style={{\"marginTop\": \"20px\"}}>\n            <ButtonGroup id=\"platform\" className=\"mb-2\">\n                {Object.keys(platforms).map((radio) => (\n                <ToggleButton\n                    key={radio}\n                    id={`radio-${radio}`}\n                    type=\"radio\"\n                    variant=\"outline-danger\"\n                    name=\"radio\"\n                    value={radio}\n                    checked={radioValue === radio}\n                    onChange={ (e) => {setRadioValue(e.currentTarget.value); onInputChange(e)} }\n                >\n                    {radio}\n                </ToggleButton>\n                ))}\n            </ButtonGroup>\n\n            <InputGroup className=\"mb-3\" >\n                <Button \n                    variant=\"danger\" \n                    size=\"lg\"\n                    onClick={useSignerToFetchPublicKey}\n                > \n                    Use Signer\n                </Button>\n                <FormControl \n                    id=\"address\"\n                    size=\"lg\" \n                    placeholder=\"Recipient's address\"\n                    aria-label=\"Recipient's address\"\n                    aria-describedby=\"basic-addon2\"\n                    autocomplete=\"off\"\n                    onChange = { (e) => {onInputChange(e)} } \n                />\n            </InputGroup>\n            <InputGroup className=\"mb-3\">\n                <FormControl \n                    id=\"amount\"\n                    size=\"lg\" \n                    type=\"number\"\n                    placeholder=\"Amount to receive\" \n                    aria-label=\"Casper amount\" \n                    autocomplete=\"off\"\n                    onChange = { (e) => {onInputChange(e)} }\n                />\n            </InputGroup>\n\n            <InputGroup className=\"mb-3\">\n                <FormControl \n                    id=\"transfer-id\"\n                    size=\"lg\" \n                    placeholder=\"Transfer ID (Memo)\"\n                    aria-label=\"Transfer ID (Memo)\"\n                    autocomplete=\"off\"\n                    onChange = { (e) => {onInputChange(e)} }\n                />\n            </InputGroup>\n\n            <InputGroup className=\"mb-3\">\n                <FormControl \n                    id=\"message\"\n                    size=\"lg\" \n                    placeholder=\"Message\"\n                    aria-label=\"Message\"\n                    autocomplete=\"off\"\n                    onChange = { (e) => {onInputChange(e)} }\n                />\n            </InputGroup>\n        </div>\n    );\n};\n\nexport default ConfigInputs;","export default __webpack_public_path__ + \"static/media/casper.bc364f1d.png\";","import {Button, Stack, InputGroup, FormControl} from 'react-bootstrap'\nimport QRCode from 'qrcode.react';\nimport logo from \"../assets/img/casper.png\"\nimport axios from 'axios';\nimport env from \"react-dotenv\";\n\nconst QrCode = ( {qrData, platforms} ) => {\n\n    const getQRValue = () => {\n        return platforms[qrData.platform](qrData);\n    };\n\n    const downloadQR = () => {\n        let link = document.createElement('a');\n        let canvas = document.getElementById('qr');\n        link.href = canvas.toDataURL(\"image/png\");\n        link.download = 'wallet.png';\n        link.click();\n    };\n\n    const copyLinkToQR = () => {\n      let canvas = document.getElementById('qr');\n      canvas.toBlob(function(blob) {\n        const formData = new FormData();\n        formData.append('image', blob);\n      \n        axios({\n          method: \"POST\",\n          url: `${env.IMGBB_BASE}?expiration=${env.IMGBB_EXPIRATION}&key=${env.IMGBB_API_KEY}`,\n          data: formData\n        }).then((response) => {\n          navigator.clipboard.writeText(response.data.data.display_url);\n        }).catch(err => {\n          \n        });\n      });\n    };\n\n    return (\n      <Stack direction=\"vertical\" gap={3}>\n        <div className=\"bg-light border\">\n\n        <QRCode id=\"qr\"\n          value={getQRValue()}\n          size={300}\n          bgColor={\"#ffffff\"}\n          fgColor={\"#000000\"}\n          level={\"L\"}\n          includeMargin={true}\n          renderAs={\"canvas\"}\n          imageSettings={{\n            src: logo,\n            x: null,\n            y: null,\n            height: 40,\n            width: 40,\n            excavate: false,\n          }}\n        />\n\n        </div>\n        <div className=\"d-grid\">\n          <Button onClick={() => downloadQR()} variant=\"outline-success\" size=\"lg\">Save QR</Button>\n        </div>\n        <div className=\" d-grid\"> \n          <Button onClick={() => {copyLinkToQR()}} variant=\"outline-primary\" size=\"lg\" >Copy Link</Button>\n        </div>\n      </Stack>\n    );\n}\n\nexport default QrCode;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport {Container, Row, Col} from 'react-bootstrap';\nimport {useState} from 'react';\nimport Header from './components/Header';\nimport ConfigInputs from './components/ConfigInputs';\nimport QrCode from './components/QrCode';\n\nfunction App() {\n  const platforms = {\n      'cspr.live': (qrData) => `https://${qrData.platform}/transfer?recepient=${qrData.address}&amount=${qrData.amount}&transferId=${qrData.transferId}&message=${qrData.message}`,\n      'mobile': (qrData) => `casper:${qrData.address}?amount=${qrData.amount}&transferId=${qrData.transferId}&message=${qrData.message}`\n  };\n\n  const [qrData, setQrData] = useState({\n    platform: 'cspr.live',\n    address: '',\n    amount: '',\n    transferId: '',\n    message: '',\n  });\n\n  //On Input Change\n  const onInputChange = (e) => {\n    setQrData(\n      {\n        platform: document.querySelector('#platform .btn-check:checked').value,\n        address: document.getElementById('address').value,\n        amount: document.getElementById('amount').value,\n        transferId: document.getElementById('transfer-id').value,\n        message: document.getElementById('message').value,\n      }\n    );\n  };\n\n  return (\n    <Container fluid>\n      <Row>\n        <Col style={{\"textAlign\": \"center\"}}><Header/></Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col xs=\"auto\" sm=\"auto\" md=\"auto\" lg=\"auto\">\n          <QrCode qrData={qrData} platforms={platforms}/>\n        </Col>\n      </Row>\n      <Row className=\"justify-content-center\">\n        <Col ></Col>\n        <Col lg={8}><ConfigInputs onInputChange={onInputChange} platforms={platforms}/></Col>\n        <Col ></Col>\n      </Row>\n  </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { positions, Provider } from \"react-alert\";\nimport AlertTemplate from \"react-alert-template-basic\";\n\nconst options = {\n  timeout: 5000,\n  position: positions.TOP_RIGHT\n};\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider template={AlertTemplate} {...options}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}